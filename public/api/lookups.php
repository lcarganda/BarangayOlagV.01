<?php
// Start output buffering to catch any premature output
ob_start();

ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Clear any accidental output before sending headers
ob_clean();
header('Content-Type: application/json');

// Log start of script execution
error_log("DEBUG: lookups.php script started.");

// Correct path to dbh.inc.php
require_once '../../backend/dbh.inc.php';

// Check if $pdo is available from dbh.inc.php
if (!isset($pdo)) {
    error_log("ERROR: PDO connection not established in lookups.php.");
    respondWithError("Database connection was not established.", 500);
}

error_log("DEBUG: PDO connection established in lookups.php.");

/**
 * Sends a JSON error response and exits the script.
 * @param string $message - The error message.
 * @param int $statusCode - HTTP status code for the response.
 */
function respondWithError($message, $statusCode = 400) {
    error_log("ERROR: Responding with error: " . $message . " (Status: " . $statusCode . ")");
    http_response_code($statusCode);
    echo json_encode(['status' => 'error', 'message' => $message]);
    exit();
}

/**
 * Fetches data from a specified lookup table.
 * @param PDO $pdo The PDO database connection object.
 * @param string $tableName The name of the lookup table.
 * @param string $idColumn The name of the ID column in the table.
 * @param string $nameColumn The name of the name column in the table.
 */
function fetchLookupData(PDO $pdo, $tableName, $idColumn, $nameColumn) {
    try {
        $sql = "SELECT {$idColumn} AS id, {$nameColumn} AS name FROM {$tableName} ORDER BY {$nameColumn} ASC";
        $stmt = $pdo->prepare($sql);
        $stmt->execute();
        $data = $stmt->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode(['status' => 'success', 'data' => $data]);
        exit();
    } catch (PDOException $e) {
        error_log("PDO Exception in fetchLookupData for {$tableName}: " . $e->getMessage());
        respondWithError("Failed to retrieve {$tableName} data: " . $e->getMessage(), 500);
    }
}

// Main request handling logic
$type = $_GET['type'] ?? '';
error_log("DEBUG: Request type: " . $type);

switch ($type) {
    case 'zones':
        fetchLookupData($pdo, 'zone', 'zone_id', 'zone_name');
        break;
    case 'water_sources': // Changed from water_source
        fetchLookupData($pdo, 'water_source_lookup', 'id', 'water_source_name');
        break;
    case 'cooking_fuels': // Changed from cooking_fuel
        fetchLookupData($pdo, 'cooking_fuel_lookup', 'id', 'cooking_fuel_name');
        break;
    case 'tenure_statuses': // Changed from tenure_status
        fetchLookupData($pdo, 'tenure_status_lookup', 'id', 'tenure_status_name');
        break;
    case 'income_sources': // Changed from income_source
        fetchLookupData($pdo, 'income_source_lookup', 'id', 'income_source_name');
        break;
    case 'household_types': // Changed from household_type
        fetchLookupData($pdo, 'household_type_lookup', 'id', 'household_type_name');
        break;
    case 'house_materials': // Changed from house_material
        fetchLookupData($pdo, 'house_material_lookup', 'id', 'house_material_name');
        break;
    case 'civil_statuses': // Changed from civil_status
        fetchLookupData($pdo, 'civil_status_lookup', 'id', 'status_name');
        break;
    case 'blood_types': // Changed from blood_type
        fetchLookupData($pdo, 'blood_type_lookup', 'id', 'blood_type_name');
        break;
    case 'religions': // Changed from religion
        fetchLookupData($pdo, 'religion_lookup', 'id', 'religion_name');
        break;
    case 'educational_attainments': // Changed from educational_attainment
        fetchLookupData($pdo, 'educational_attainment_lookup', 'id', 'attainment_name');
        break;
    default:
        error_log("ERROR: Invalid lookup type requested: " . $type);
        respondWithError("Invalid lookup type.", 400);
        break;
}

// This block should ideally not be reached if respondWithError or fetchLookupData exit correctly.
if (!headers_sent()) {
    error_log("WARNING: No response generated by lookups.php script. This should not happen.");
    respondWithError("Server did not generate a response.", 500);
}
?>
